Week 10 
---------------------------------
**Testing of web applications**
---------------------------------
-Web application is deployed (available worldwide) on the web
-Requests accepted used HTTP
-Like client server application, client runs on browser

-Web service is a web deployed program that accepts XML messages wrapped in SOAP
-no UI
-service must be published so that other applications can use it

-Message passing interface used for loosely coupled components to communicate
-Webapp is distributed
-Each component can be developed using a completely different technology

-WAYS OF DEPLOYING A WEB APP
    *bundled(pre install on computer) ex:OS
    *shrink-wrap(buy and install) ex: antivirus
    *contract(access to software depends on contract period)
    *embedded(on hardware device, communicates with sensors actuators)
    *web software, deployed through HTTP

ARCHITECURE OF WEB APPLICATION 
-presentation layer: UI
-data content: data access happens
-data representation: data stored and retrieved form memory
-Data storage: permanent data storage

Each layer must be tested seperately and system level testing must also be done

ISSUES WITH WEB APPLICATION
-must be fast(not slow, no bugs)
-must be of high quality
-HTTP is a stateless protocol, each request is independent
-state managed using cookies 
-html forms created dynamically so UI can change
-flow of control can be controlled by user by back buttons etc
-servers dk where the request comes form
-new components can be added during execution
-webapp extremely loosely coupled because coupled through internet, coupled through diverse hardware, diverse programmin glanguages

OUR TECHNIQUES VS TESTING WEB APPS
-graphs dont apply
-state behavior is hard to model
-hard to get access to server side
-not clear what logic predicates can be used
-no model for mutation operators

CATEGORIES OF WEB applications
-static
-dynamic
-web services

-HTML can be stored as static HTML file or generated by JSP,ASP dynamically
-Web site is collection of web pages

TEST CASE FOR WEB APP
-sequence of interactions between components on clients and servers
-depocted by a path of transitions (but challenging for dynamic)

TESTING STATIC WEB APP
-not program testing but testing HTML connections
-check if links are valid
-main ussue is ensure there are no dead link(hyperlink to non valid URL)


non-functional parameters
-must do load testing(everyone logs in)
-performance evaluation
-access control (authentication)

GRAPH MODEL OF STATIC WEB site
-nodes are web pages
-edges are HTML links
-BFS used, by starting with intri pages and recursively do BFS for all links on intro pages
-graph then tested for edge coverage (traverse each edge)


